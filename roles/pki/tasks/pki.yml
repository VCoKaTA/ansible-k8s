# 注册变量p，根据p的stat信息判断是否已经生成过ca证书，如果没有，下一步生成证书
# 如果已经有ca证书，为了保证整个安装的幂等性，跳过证书生成的步骤
- name: 读取ca证书stat信息
  stat: path="{{ pki_dir }}/ca.pem"
  register: ca_file

- name: 准备CA配置文件和签名请求
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "ca-config.json"
  - "ca-csr.json"
  when: ca_file.stat.isreg is not defined

- name: 生成 CA 证书和私钥
  shell: "{{ pki_bin_dir }}/cfssl gencert -initca ca-csr.json | {{ pki_bin_dir }}/cfssljson -bare ca"
  args:
    chdir: "{{ pki_dir }}"
  when: ca_file.stat.isreg is not defined

#####创建etcd证书
- name: 读取etcd证书stat信息
  stat: path="{{ pki_dir }}/etcd-key.pem"
  register: etcd_file

- name: 准备etcd配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "etcd-csr.json"
  when: etcd_file.stat.isreg is not defined

- name: 生成 etcd 证书
  when: etcd_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes etcd-csr.json | {{ pki_bin_dir }}/cfssljson -bare etcd
  args:
    chdir: "{{ pki_dir }}"

#####创建admin证书
- name: 读取admin证书stat信息
  stat: path="{{ pki_dir }}/admin-key.pem"
  register: admin_file

- name: 准备admin配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "admin-csr.json"
  when: admin_file.stat.isreg is not defined

- name: 生成 admin 证书
  when: admin_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes admin-csr.json | {{ pki_bin_dir }}/cfssljson -bare admin
  args:
    chdir: "{{ pki_dir }}"

#####创建kube-api证书
- name: 读取kube-api证书stat信息
  stat: path="{{ pki_dir }}/kube-api-key.pem"
  register: kube_api_file

- name: 准备kube-api配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "kube-api-csr.json"
  when: kube_api_file.stat.isreg is not defined

- name: 生成 kube-api 证书
  when: kube_api_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes kube-api-csr.json | {{ pki_bin_dir }}/cfssljson -bare kube-api
  args:
    chdir: "{{ pki_dir }}"

#####创建kube-controller-manager证书
- name: 读取kube-controller-manager证书stat信息
  stat: path="{{ pki_dir }}/kube-controller-manager-key.pem"
  register: kube_controller_manager_file

- name: 准备kube-controller-manager配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "kube-controller-manager-csr.json"
  when: kube_controller_manager_file.stat.isreg is not defined

- name: 生成 kube-controller-manager 证书
  when: kube_controller_manager_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes kube-controller-manager-csr.json | {{ pki_bin_dir }}/cfssljson -bare kube-controller-manager
  args:
    chdir: "{{ pki_dir }}"

#####创建kube-scheduler证书
- name: 读取kube-scheduler证书stat信息
  stat: path="{{ pki_dir }}/kube-scheduler-key.pem"
  register: kube_scheduler_file

- name: 准备kube-scheduler配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "kube-scheduler-csr.json"
  when: kube_scheduler_file.stat.isreg is not defined

- name: 生成 kube-scheduler 证书
  when: kube_scheduler_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes kube-scheduler-csr.json | {{ pki_bin_dir }}/cfssljson -bare kube-scheduler
  args:
    chdir: "{{ pki_dir }}"

#####创建kube-proxy证书
- name: 读取kube-proxy证书stat信息
  stat: path="{{ pki_dir }}/kube-proxy-key.pem"
  register: kube_proxy_file

- name: 准备kube-proxy配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "kube-proxy-csr.json"
  when: kube_proxy_file.stat.isreg is not defined

- name: 生成 kube-proxy 证书
  when: kube_proxy_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes kube-proxy-csr.json | {{ pki_bin_dir }}/cfssljson -bare kube-proxy
  args:
    chdir: "{{ pki_dir }}"

#####创建proxy-client证书
- name: 读取proxy-client证书stat信息
  stat: path="{{ pki_dir }}/proxy-client-key.pem"
  register: proxy_client_file

- name: 准备proxy-client配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "proxy-client-csr.json"
  when: proxy_client_file.stat.isreg is not defined

- name: 生成 proxy-client 证书
  when: proxy_client_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes proxy-client-csr.json | {{ pki_bin_dir }}/cfssljson -bare proxy-client
  args:
    chdir: "{{ pki_dir }}"

#####创建calico证书
- name: 读取calico证书stat信息
  stat: path="{{ pki_dir }}/calico-key.pem"
  register: calico_file

- name: 准备calico配置文件
  template: src={{ item }}.j2 dest={{ pki_dir }}/{{ item }}
  with_items:
  - "calico-csr.json"
  when: calico_file.stat.isreg is not defined

- name: 生成 calico 证书
  when: calico_file.stat.isreg is not defined
  shell: |
        {{ pki_bin_dir }}/cfssl gencert \
        -ca={{ pki_dir }}/ca.pem \
        -ca-key={{ pki_dir }}/ca-key.pem \
        -config={{ pki_dir }}/ca-config.json \
        -profile=kubernetes calico-csr.json | {{ pki_bin_dir }}/cfssljson -bare calico
  args:
    chdir: "{{ pki_dir }}"
